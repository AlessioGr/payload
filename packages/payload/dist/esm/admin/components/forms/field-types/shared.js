/**
 * Determines whether a field should be displayed as right-to-left (RTL) based on its configuration, payload's localization configuration and the adming user's currently enabled locale.

 * @returns Whether the field should be displayed as RTL.
 */ export function isFieldRTL(param) {
    var fieldRTL = param.fieldRTL, fieldLocalized = param.fieldLocalized, locale = param.locale, localizationConfig = param.localizationConfig;
    var _locale, _localizationConfig, _locale1;
    var hasMultipleLocales = locale && localizationConfig && localizationConfig.locales && localizationConfig.locales.length > 1;
    var isCurrentLocaleDefaultLocale = ((_locale = locale) === null || _locale === void 0 ? void 0 : _locale.code) === ((_localizationConfig = localizationConfig) === null || _localizationConfig === void 0 ? void 0 : _localizationConfig.defaultLocale);
    return fieldRTL !== false && ((_locale1 = locale) === null || _locale1 === void 0 ? void 0 : _locale1.rtl) === true && (fieldLocalized || !fieldLocalized && !hasMultipleLocales // If there is only one locale which is also rtl, that field is rtl too
     || !fieldLocalized && isCurrentLocaleDefaultLocale // If the current locale is the default locale, but the field is not localized, that field is rtl too
    ) || fieldRTL === true; // If fieldRTL is true. This should be useful for when no localization is set at all in the payload config, but you still want fields to be rtl.
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL3NoYXJlZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IExvY2FsZSwgU2FuaXRpemVkTG9jYWxpemF0aW9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29uZmlnL3R5cGVzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBmaWVsZCBzaG91bGQgYmUgZGlzcGxheWVkIGFzIHJpZ2h0LXRvLWxlZnQgKFJUTCkgYmFzZWQgb24gaXRzIGNvbmZpZ3VyYXRpb24sIHBheWxvYWQncyBsb2NhbGl6YXRpb24gY29uZmlndXJhdGlvbiBhbmQgdGhlIGFkbWluZyB1c2VyJ3MgY3VycmVudGx5IGVuYWJsZWQgbG9jYWxlLlxuXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBmaWVsZCBzaG91bGQgYmUgZGlzcGxheWVkIGFzIFJUTC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRmllbGRSVEwoe1xuICBmaWVsZFJUTCxcbiAgZmllbGRMb2NhbGl6ZWQsXG4gIGxvY2FsZSxcbiAgbG9jYWxpemF0aW9uQ29uZmlnLFxufToge1xuICAgIGZpZWxkUlRMOiBib29sZWFuO1xuICAgIGZpZWxkTG9jYWxpemVkOiBib29sZWFuO1xuICAgIGxvY2FsZTogTG9jYWxlO1xuICAgIGxvY2FsaXphdGlvbkNvbmZpZz86IFNhbml0aXplZExvY2FsaXphdGlvbkNvbmZpZztcbn0pIHtcbiAgY29uc3QgaGFzTXVsdGlwbGVMb2NhbGVzID0gbG9jYWxlXG4gICAgICAmJiAobG9jYWxpemF0aW9uQ29uZmlnKVxuICAgICAgJiYgKGxvY2FsaXphdGlvbkNvbmZpZy5sb2NhbGVzKVxuICAgICAgJiYgKGxvY2FsaXphdGlvbkNvbmZpZy5sb2NhbGVzLmxlbmd0aCA+IDEpO1xuICBjb25zdCBpc0N1cnJlbnRMb2NhbGVEZWZhdWx0TG9jYWxlID0gbG9jYWxlPy5jb2RlID09PSBsb2NhbGl6YXRpb25Db25maWc/LmRlZmF1bHRMb2NhbGU7XG5cbiAgcmV0dXJuICgoZmllbGRSVEwgIT09IGZhbHNlICYmIGxvY2FsZT8ucnRsID09PSB0cnVlKVxuICAgICAgJiYgKFxuICAgICAgICBmaWVsZExvY2FsaXplZFxuICAgICAgICB8fCAoIWZpZWxkTG9jYWxpemVkICYmICFoYXNNdWx0aXBsZUxvY2FsZXMpIC8vIElmIHRoZXJlIGlzIG9ubHkgb25lIGxvY2FsZSB3aGljaCBpcyBhbHNvIHJ0bCwgdGhhdCBmaWVsZCBpcyBydGwgdG9vXG4gICAgICAgIHx8ICghZmllbGRMb2NhbGl6ZWQgJiYgaXNDdXJyZW50TG9jYWxlRGVmYXVsdExvY2FsZSkgLy8gSWYgdGhlIGN1cnJlbnQgbG9jYWxlIGlzIHRoZSBkZWZhdWx0IGxvY2FsZSwgYnV0IHRoZSBmaWVsZCBpcyBub3QgbG9jYWxpemVkLCB0aGF0IGZpZWxkIGlzIHJ0bCB0b29cbiAgICAgICkpXG4gICAgICB8fCAoZmllbGRSVEwgPT09IHRydWUpOyAvLyBJZiBmaWVsZFJUTCBpcyB0cnVlLiBUaGlzIHNob3VsZCBiZSB1c2VmdWwgZm9yIHdoZW4gbm8gbG9jYWxpemF0aW9uIGlzIHNldCBhdCBhbGwgaW4gdGhlIHBheWxvYWQgY29uZmlnLCBidXQgeW91IHN0aWxsIHdhbnQgZmllbGRzIHRvIGJlIHJ0bC5cbn1cbiJdLCJuYW1lcyI6WyJpc0ZpZWxkUlRMIiwiZmllbGRSVEwiLCJmaWVsZExvY2FsaXplZCIsImxvY2FsZSIsImxvY2FsaXphdGlvbkNvbmZpZyIsImhhc011bHRpcGxlTG9jYWxlcyIsImxvY2FsZXMiLCJsZW5ndGgiLCJpc0N1cnJlbnRMb2NhbGVEZWZhdWx0TG9jYWxlIiwiY29kZSIsImRlZmF1bHRMb2NhbGUiLCJydGwiXSwibWFwcGluZ3MiOiJBQUVBOzs7O0NBSUMsR0FDRCxPQUFPLFNBQVNBLFdBQVcsS0FVMUI7UUFUQ0MsV0FEeUIsTUFDekJBLFVBQ0FDLGlCQUZ5QixNQUV6QkEsZ0JBQ0FDLFNBSHlCLE1BR3pCQSxRQUNBQyxxQkFKeUIsTUFJekJBO1FBV3FDRCxTQUFpQkMscUJBRXZCRDtJQU4vQixJQUFNRSxxQkFBcUJGLFVBQ25CQyxzQkFDQUEsbUJBQW1CRSxPQUFPLElBQzFCRixtQkFBbUJFLE9BQU8sQ0FBQ0MsTUFBTSxHQUFHO0lBQzVDLElBQU1DLCtCQUErQkwsRUFBQUEsVUFBQUEsb0JBQUFBLDhCQUFBQSxRQUFRTSxJQUFJLFFBQUtMLHNCQUFBQSxnQ0FBQUEsMENBQUFBLG9CQUFvQk0sYUFBYTtJQUV2RixPQUFPLEFBQUVULGFBQWEsU0FBU0UsRUFBQUEsV0FBQUEsb0JBQUFBLCtCQUFBQSxTQUFRUSxHQUFHLE1BQUssUUFFekNULENBQUFBLGtCQUNJLENBQUNBLGtCQUFrQixDQUFDRyxtQkFBb0IsdUVBQXVFO1FBQy9HLENBQUNILGtCQUFrQk0sNkJBQThCLHFHQUFxRztJQUF2RyxLQUVqRFAsYUFBYSxNQUFPLGdKQUFnSjtBQUM5SyJ9