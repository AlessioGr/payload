import { createContext, useContext } from "react";
import { useContextSelector, createContext as createSelectorContext, useContext as useFullContext } from "use-context-selector";
var FormContext = createContext({});
var FormWatchContext = createContext({});
var SubmittedContext = createContext(false);
var ProcessingContext = createContext(false);
var ModifiedContext = createContext(false);
var FormFieldsContext = createSelectorContext([
    {},
    function() {
        return null;
    }
]);
/**
 * Get the state of the form, can be used to submit & validate the form.
 *
 * @see https://payloadcms.com/docs/admin/hooks#useform
 */ var useForm = function() {
    return useContext(FormContext);
};
var useWatchForm = function() {
    return useContext(FormWatchContext);
};
var useFormSubmitted = function() {
    return useContext(SubmittedContext);
};
var useFormProcessing = function() {
    return useContext(ProcessingContext);
};
var useFormModified = function() {
    return useContext(ModifiedContext);
};
/**
 * Get and set the value of a form field based on a selector
 *
 * @see https://payloadcms.com/docs/admin/hooks#useformfields
 */ var useFormFields = function(selector) {
    return useContextSelector(FormFieldsContext, selector);
};
/**
 * Get the state of all form fields.
 *
 * @see https://payloadcms.com/docs/admin/hooks#useallformfields
 */ var useAllFormFields = function() {
    return useFullContext(FormFieldsContext);
};
export { SubmittedContext, ProcessingContext, ModifiedContext, useFormSubmitted, useFormProcessing, useFormModified, useForm, FormContext, FormFieldsContext, useFormFields, useAllFormFields, FormWatchContext, useWatchForm };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL0Zvcm0vY29udGV4dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQ29udGV4dFNlbGVjdG9yLCBjcmVhdGVDb250ZXh0IGFzIGNyZWF0ZVNlbGVjdG9yQ29udGV4dCwgdXNlQ29udGV4dCBhcyB1c2VGdWxsQ29udGV4dCB9IGZyb20gJ3VzZS1jb250ZXh0LXNlbGVjdG9yJztcbmltcG9ydCB7IENvbnRleHQsIEZvcm1GaWVsZHNDb250ZXh0IGFzIEZvcm1GaWVsZHNDb250ZXh0VHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBGb3JtQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe30gYXMgQ29udGV4dCk7XG5jb25zdCBGb3JtV2F0Y2hDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSBhcyBDb250ZXh0KTtcbmNvbnN0IFN1Ym1pdHRlZENvbnRleHQgPSBjcmVhdGVDb250ZXh0KGZhbHNlKTtcbmNvbnN0IFByb2Nlc3NpbmdDb250ZXh0ID0gY3JlYXRlQ29udGV4dChmYWxzZSk7XG5jb25zdCBNb2RpZmllZENvbnRleHQgPSBjcmVhdGVDb250ZXh0KGZhbHNlKTtcbmNvbnN0IEZvcm1GaWVsZHNDb250ZXh0ID0gY3JlYXRlU2VsZWN0b3JDb250ZXh0PEZvcm1GaWVsZHNDb250ZXh0VHlwZT4oW3t9LCAoKSA9PiBudWxsXSk7XG5cbi8qKlxuICogR2V0IHRoZSBzdGF0ZSBvZiB0aGUgZm9ybSwgY2FuIGJlIHVzZWQgdG8gc3VibWl0ICYgdmFsaWRhdGUgdGhlIGZvcm0uXG4gKlxuICogQHNlZSBodHRwczovL3BheWxvYWRjbXMuY29tL2RvY3MvYWRtaW4vaG9va3MjdXNlZm9ybVxuICovXG5jb25zdCB1c2VGb3JtID0gKCk6IENvbnRleHQgPT4gdXNlQ29udGV4dChGb3JtQ29udGV4dCk7XG5jb25zdCB1c2VXYXRjaEZvcm0gPSAoKTogQ29udGV4dCA9PiB1c2VDb250ZXh0KEZvcm1XYXRjaENvbnRleHQpO1xuY29uc3QgdXNlRm9ybVN1Ym1pdHRlZCA9ICgpOiBib29sZWFuID0+IHVzZUNvbnRleHQoU3VibWl0dGVkQ29udGV4dCk7XG5jb25zdCB1c2VGb3JtUHJvY2Vzc2luZyA9ICgpOiBib29sZWFuID0+IHVzZUNvbnRleHQoUHJvY2Vzc2luZ0NvbnRleHQpO1xuY29uc3QgdXNlRm9ybU1vZGlmaWVkID0gKCk6IGJvb2xlYW4gPT4gdXNlQ29udGV4dChNb2RpZmllZENvbnRleHQpO1xuXG5cbi8qKlxuICogR2V0IGFuZCBzZXQgdGhlIHZhbHVlIG9mIGEgZm9ybSBmaWVsZCBiYXNlZCBvbiBhIHNlbGVjdG9yXG4gKlxuICogQHNlZSBodHRwczovL3BheWxvYWRjbXMuY29tL2RvY3MvYWRtaW4vaG9va3MjdXNlZm9ybWZpZWxkc1xuICovXG5jb25zdCB1c2VGb3JtRmllbGRzID0gPFZhbHVlID0gdW5rbm93bj4oc2VsZWN0b3I6IChjb250ZXh0OiBGb3JtRmllbGRzQ29udGV4dFR5cGUpID0+IFZhbHVlKTogVmFsdWUgPT4gdXNlQ29udGV4dFNlbGVjdG9yKEZvcm1GaWVsZHNDb250ZXh0LCBzZWxlY3Rvcik7XG5cbi8qKlxuICogR2V0IHRoZSBzdGF0ZSBvZiBhbGwgZm9ybSBmaWVsZHMuXG4gKlxuICogQHNlZSBodHRwczovL3BheWxvYWRjbXMuY29tL2RvY3MvYWRtaW4vaG9va3MjdXNlYWxsZm9ybWZpZWxkc1xuICovXG5jb25zdCB1c2VBbGxGb3JtRmllbGRzID0gKCk6IEZvcm1GaWVsZHNDb250ZXh0VHlwZSA9PiB1c2VGdWxsQ29udGV4dChGb3JtRmllbGRzQ29udGV4dCk7XG5cbmV4cG9ydCB7XG4gIFN1Ym1pdHRlZENvbnRleHQsXG4gIFByb2Nlc3NpbmdDb250ZXh0LFxuICBNb2RpZmllZENvbnRleHQsXG4gIHVzZUZvcm1TdWJtaXR0ZWQsXG4gIHVzZUZvcm1Qcm9jZXNzaW5nLFxuICB1c2VGb3JtTW9kaWZpZWQsXG4gIHVzZUZvcm0sXG4gIEZvcm1Db250ZXh0LFxuICBGb3JtRmllbGRzQ29udGV4dCxcbiAgdXNlRm9ybUZpZWxkcyxcbiAgdXNlQWxsRm9ybUZpZWxkcyxcbiAgRm9ybVdhdGNoQ29udGV4dCxcbiAgdXNlV2F0Y2hGb3JtLFxufTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZUNvbnRleHRTZWxlY3RvciIsImNyZWF0ZVNlbGVjdG9yQ29udGV4dCIsInVzZUZ1bGxDb250ZXh0IiwiRm9ybUNvbnRleHQiLCJGb3JtV2F0Y2hDb250ZXh0IiwiU3VibWl0dGVkQ29udGV4dCIsIlByb2Nlc3NpbmdDb250ZXh0IiwiTW9kaWZpZWRDb250ZXh0IiwiRm9ybUZpZWxkc0NvbnRleHQiLCJ1c2VGb3JtIiwidXNlV2F0Y2hGb3JtIiwidXNlRm9ybVN1Ym1pdHRlZCIsInVzZUZvcm1Qcm9jZXNzaW5nIiwidXNlRm9ybU1vZGlmaWVkIiwidXNlRm9ybUZpZWxkcyIsInNlbGVjdG9yIiwidXNlQWxsRm9ybUZpZWxkcyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsYUFBYSxFQUFFQyxVQUFVLFFBQVEsUUFBUTtBQUNsRCxTQUFTQyxrQkFBa0IsRUFBRUYsaUJBQWlCRyxxQkFBcUIsRUFBRUYsY0FBY0csY0FBYyxRQUFRLHVCQUF1QjtBQUdoSSxJQUFNQyxjQUFjTCxjQUFjLENBQUM7QUFDbkMsSUFBTU0sbUJBQW1CTixjQUFjLENBQUM7QUFDeEMsSUFBTU8sbUJBQW1CUCxjQUFjO0FBQ3ZDLElBQU1RLG9CQUFvQlIsY0FBYztBQUN4QyxJQUFNUyxrQkFBa0JULGNBQWM7QUFDdEMsSUFBTVUsb0JBQW9CUCxzQkFBNkM7SUFBQyxDQUFDO0lBQUc7ZUFBTTs7Q0FBSztBQUV2Rjs7OztDQUlDLEdBQ0QsSUFBTVEsVUFBVTtXQUFlVixXQUFXSTs7QUFDMUMsSUFBTU8sZUFBZTtXQUFlWCxXQUFXSzs7QUFDL0MsSUFBTU8sbUJBQW1CO1dBQWVaLFdBQVdNOztBQUNuRCxJQUFNTyxvQkFBb0I7V0FBZWIsV0FBV087O0FBQ3BELElBQU1PLGtCQUFrQjtXQUFlZCxXQUFXUTs7QUFHbEQ7Ozs7Q0FJQyxHQUNELElBQU1PLGdCQUFnQixTQUFrQkM7V0FBK0RmLG1CQUFtQlEsbUJBQW1CTzs7QUFFN0k7Ozs7Q0FJQyxHQUNELElBQU1DLG1CQUFtQjtXQUE2QmQsZUFBZU07O0FBRXJFLFNBQ0VILGdCQUFnQixFQUNoQkMsaUJBQWlCLEVBQ2pCQyxlQUFlLEVBQ2ZJLGdCQUFnQixFQUNoQkMsaUJBQWlCLEVBQ2pCQyxlQUFlLEVBQ2ZKLE9BQU8sRUFDUE4sV0FBVyxFQUNYSyxpQkFBaUIsRUFDakJNLGFBQWEsRUFDYkUsZ0JBQWdCLEVBQ2hCWixnQkFBZ0IsRUFDaEJNLFlBQVksR0FDWiJ9