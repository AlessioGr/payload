import crypto from "crypto";
var algorithm = "aes-256-ctr";
export function encrypt(text) {
    var iv = crypto.randomBytes(16);
    var cipher = crypto.createCipheriv(algorithm, this.secret, iv);
    var encrypted = Buffer.concat([
        cipher.update(text),
        cipher.final()
    ]);
    var ivString = iv.toString("hex");
    var encryptedString = encrypted.toString("hex");
    return "".concat(ivString).concat(encryptedString);
}
export function decrypt(hash) {
    var iv = hash.slice(0, 32);
    var content = hash.slice(32);
    var decipher = crypto.createDecipheriv(algorithm, this.secret, Buffer.from(iv, "hex"));
    var decrypted = Buffer.concat([
        decipher.update(Buffer.from(content, "hex")),
        decipher.final()
    ]);
    return decrypted.toString();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hdXRoL2NyeXB0by50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbmNvbnN0IGFsZ29yaXRobSA9ICdhZXMtMjU2LWN0cic7XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNyeXB0KHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGl2ID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KTtcbiAgY29uc3QgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KGFsZ29yaXRobSwgdGhpcy5zZWNyZXQsIGl2KTtcblxuICBjb25zdCBlbmNyeXB0ZWQgPSBCdWZmZXIuY29uY2F0KFtjaXBoZXIudXBkYXRlKHRleHQpLCBjaXBoZXIuZmluYWwoKV0pO1xuXG4gIGNvbnN0IGl2U3RyaW5nID0gaXYudG9TdHJpbmcoJ2hleCcpO1xuICBjb25zdCBlbmNyeXB0ZWRTdHJpbmcgPSBlbmNyeXB0ZWQudG9TdHJpbmcoJ2hleCcpO1xuXG4gIHJldHVybiBgJHtpdlN0cmluZ30ke2VuY3J5cHRlZFN0cmluZ31gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjcnlwdChoYXNoOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBpdiA9IGhhc2guc2xpY2UoMCwgMzIpO1xuICBjb25zdCBjb250ZW50ID0gaGFzaC5zbGljZSgzMik7XG5cbiAgY29uc3QgZGVjaXBoZXIgPSBjcnlwdG8uY3JlYXRlRGVjaXBoZXJpdihhbGdvcml0aG0sIHRoaXMuc2VjcmV0LCBCdWZmZXIuZnJvbShpdiwgJ2hleCcpKTtcblxuICBjb25zdCBkZWNyeXB0ZWQgPSBCdWZmZXIuY29uY2F0KFtkZWNpcGhlci51cGRhdGUoQnVmZmVyLmZyb20oY29udGVudCwgJ2hleCcpKSwgZGVjaXBoZXIuZmluYWwoKV0pO1xuXG4gIHJldHVybiBkZWNyeXB0ZWQudG9TdHJpbmcoKTtcbn1cbiJdLCJuYW1lcyI6WyJjcnlwdG8iLCJhbGdvcml0aG0iLCJlbmNyeXB0IiwidGV4dCIsIml2IiwicmFuZG9tQnl0ZXMiLCJjaXBoZXIiLCJjcmVhdGVDaXBoZXJpdiIsInNlY3JldCIsImVuY3J5cHRlZCIsIkJ1ZmZlciIsImNvbmNhdCIsInVwZGF0ZSIsImZpbmFsIiwiaXZTdHJpbmciLCJ0b1N0cmluZyIsImVuY3J5cHRlZFN0cmluZyIsImRlY3J5cHQiLCJoYXNoIiwic2xpY2UiLCJjb250ZW50IiwiZGVjaXBoZXIiLCJjcmVhdGVEZWNpcGhlcml2IiwiZnJvbSIsImRlY3J5cHRlZCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsWUFBWSxTQUFTO0FBRTVCLElBQU1DLFlBQVk7QUFFbEIsT0FBTyxTQUFTQyxRQUFRQyxJQUFZO0lBQ2xDLElBQU1DLEtBQUtKLE9BQU9LLFdBQVcsQ0FBQztJQUM5QixJQUFNQyxTQUFTTixPQUFPTyxjQUFjLENBQUNOLFdBQVcsSUFBSSxDQUFDTyxNQUFNLEVBQUVKO0lBRTdELElBQU1LLFlBQVlDLE9BQU9DLE1BQU0sQ0FBQztRQUFDTCxPQUFPTSxNQUFNLENBQUNUO1FBQU9HLE9BQU9PLEtBQUs7S0FBRztJQUVyRSxJQUFNQyxXQUFXVixHQUFHVyxRQUFRLENBQUM7SUFDN0IsSUFBTUMsa0JBQWtCUCxVQUFVTSxRQUFRLENBQUM7SUFFM0MsT0FBTyxBQUFDLEdBQWFDLE9BQVhGLFVBQTJCLE9BQWhCRTtBQUN2QjtBQUVBLE9BQU8sU0FBU0MsUUFBUUMsSUFBWTtJQUNsQyxJQUFNZCxLQUFLYyxLQUFLQyxLQUFLLENBQUMsR0FBRztJQUN6QixJQUFNQyxVQUFVRixLQUFLQyxLQUFLLENBQUM7SUFFM0IsSUFBTUUsV0FBV3JCLE9BQU9zQixnQkFBZ0IsQ0FBQ3JCLFdBQVcsSUFBSSxDQUFDTyxNQUFNLEVBQUVFLE9BQU9hLElBQUksQ0FBQ25CLElBQUk7SUFFakYsSUFBTW9CLFlBQVlkLE9BQU9DLE1BQU0sQ0FBQztRQUFDVSxTQUFTVCxNQUFNLENBQUNGLE9BQU9hLElBQUksQ0FBQ0gsU0FBUztRQUFTQyxTQUFTUixLQUFLO0tBQUc7SUFFaEcsT0FBT1csVUFBVVQsUUFBUTtBQUMzQiJ9