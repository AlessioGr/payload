/* eslint-disable no-nested-ternary */ function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
import fs from "fs";
import { compile } from "json-schema-to-typescript";
import Logger from "../utilities/logger";
import loadConfig from "../config/load";
import { configToJSONSchema } from "../utilities/configToJSONSchema";
import * as url from "node:url";
export function generateTypes() {
    return _generateTypes.apply(this, arguments);
}
function _generateTypes() {
    _generateTypes = _async_to_generator(function() {
        var logger, config, outputFile, jsonSchema;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    logger = Logger();
                    return [
                        4,
                        loadConfig()
                    ];
                case 1:
                    config = _state.sent();
                    outputFile = process.env.PAYLOAD_TS_OUTPUT_PATH || config.typescript.outputFile;
                    logger.info("Compiling TS types for Collections and Globals...");
                    jsonSchema = configToJSONSchema(config);
                    compile(jsonSchema, "Config", {
                        bannerComment: "/* tslint:disable */\n/* eslint-disable */\n/**\n* This file was automatically generated by Payload.\n* DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,\n* and re-run `payload generate:types` to regenerate this file.\n*/",
                        style: {
                            singleQuote: true
                        }
                    }).then(function(compiled) {
                        fs.writeFileSync(outputFile, compiled);
                        logger.info("Types written to ".concat(outputFile));
                    });
                    return [
                        2
                    ];
            }
        });
    });
    return _generateTypes.apply(this, arguments);
}
// when generateTypes.js is launched directly
// This is an ESM translation from Rich Harris https://2ality.com/2022/07/nodejs-esm-main.html
if (import.meta.url.startsWith("file:")) {
    var modulePath = url.fileURLToPath(import.meta.url);
    if (process.argv[1] === modulePath) {
        generateTypes();
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iaW4vZ2VuZXJhdGVUeXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXN0ZWQtdGVybmFyeSAqL1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IGNvbXBpbGUgfSBmcm9tICdqc29uLXNjaGVtYS10by10eXBlc2NyaXB0JztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi4vdXRpbGl0aWVzL2xvZ2dlcic7XG5pbXBvcnQgbG9hZENvbmZpZyBmcm9tICcuLi9jb25maWcvbG9hZCc7XG5pbXBvcnQgeyBjb25maWdUb0pTT05TY2hlbWEgfSBmcm9tICcuLi91dGlsaXRpZXMvY29uZmlnVG9KU09OU2NoZW1hJztcbmltcG9ydCAqIGFzIHVybCBmcm9tICdub2RlOnVybCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVR5cGVzKCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBsb2dnZXIgPSBMb2dnZXIoKTtcbiAgY29uc3QgY29uZmlnID0gYXdhaXQgbG9hZENvbmZpZygpO1xuICBjb25zdCBvdXRwdXRGaWxlID0gcHJvY2Vzcy5lbnYuUEFZTE9BRF9UU19PVVRQVVRfUEFUSCB8fCBjb25maWcudHlwZXNjcmlwdC5vdXRwdXRGaWxlO1xuXG4gIGxvZ2dlci5pbmZvKCdDb21waWxpbmcgVFMgdHlwZXMgZm9yIENvbGxlY3Rpb25zIGFuZCBHbG9iYWxzLi4uJyk7XG5cbiAgY29uc3QganNvblNjaGVtYSA9IGNvbmZpZ1RvSlNPTlNjaGVtYShjb25maWcpO1xuXG4gIGNvbXBpbGUoanNvblNjaGVtYSwgJ0NvbmZpZycsIHtcbiAgICBiYW5uZXJDb21tZW50OiAnLyogdHNsaW50OmRpc2FibGUgKi9cXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xcbi8qKlxcbiogVGhpcyBmaWxlIHdhcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBQYXlsb2FkLlxcbiogRE8gTk9UIE1PRElGWSBJVCBCWSBIQU5ELiBJbnN0ZWFkLCBtb2RpZnkgeW91ciBzb3VyY2UgUGF5bG9hZCBjb25maWcsXFxuKiBhbmQgcmUtcnVuIGBwYXlsb2FkIGdlbmVyYXRlOnR5cGVzYCB0byByZWdlbmVyYXRlIHRoaXMgZmlsZS5cXG4qLycsXG4gICAgc3R5bGU6IHtcbiAgICAgIHNpbmdsZVF1b3RlOiB0cnVlLFxuICAgIH0sXG4gIH0pLnRoZW4oKGNvbXBpbGVkKSA9PiB7XG4gICAgZnMud3JpdGVGaWxlU3luYyhvdXRwdXRGaWxlLCBjb21waWxlZCk7XG4gICAgbG9nZ2VyLmluZm8oYFR5cGVzIHdyaXR0ZW4gdG8gJHtvdXRwdXRGaWxlfWApO1xuICB9KTtcbn1cblxuLy8gd2hlbiBnZW5lcmF0ZVR5cGVzLmpzIGlzIGxhdW5jaGVkIGRpcmVjdGx5XG4vLyBUaGlzIGlzIGFuIEVTTSB0cmFuc2xhdGlvbiBmcm9tIFJpY2ggSGFycmlzIGh0dHBzOi8vMmFsaXR5LmNvbS8yMDIyLzA3L25vZGVqcy1lc20tbWFpbi5odG1sXG5pZiAoaW1wb3J0Lm1ldGEudXJsLnN0YXJ0c1dpdGgoJ2ZpbGU6JykpIHsgLy8gKEEpXG4gIGNvbnN0IG1vZHVsZVBhdGggPSB1cmwuZmlsZVVSTFRvUGF0aChpbXBvcnQubWV0YS51cmwpO1xuICBpZiAocHJvY2Vzcy5hcmd2WzFdID09PSBtb2R1bGVQYXRoKSB7IC8vIChCKVxuICAgIGdlbmVyYXRlVHlwZXMoKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImZzIiwiY29tcGlsZSIsIkxvZ2dlciIsImxvYWRDb25maWciLCJjb25maWdUb0pTT05TY2hlbWEiLCJ1cmwiLCJnZW5lcmF0ZVR5cGVzIiwibG9nZ2VyIiwiY29uZmlnIiwib3V0cHV0RmlsZSIsImpzb25TY2hlbWEiLCJwcm9jZXNzIiwiZW52IiwiUEFZTE9BRF9UU19PVVRQVVRfUEFUSCIsInR5cGVzY3JpcHQiLCJpbmZvIiwiYmFubmVyQ29tbWVudCIsInN0eWxlIiwic2luZ2xlUXVvdGUiLCJ0aGVuIiwiY29tcGlsZWQiLCJ3cml0ZUZpbGVTeW5jIiwic3RhcnRzV2l0aCIsIm1vZHVsZVBhdGgiLCJmaWxlVVJMVG9QYXRoIiwiYXJndiJdLCJtYXBwaW5ncyI6IkFBQUEsb0NBQW9DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ3BDLE9BQU9BLFFBQVEsS0FBSztBQUNwQixTQUFTQyxPQUFPLFFBQVEsNEJBQTRCO0FBQ3BELE9BQU9DLFlBQVksc0JBQXNCO0FBQ3pDLE9BQU9DLGdCQUFnQixpQkFBaUI7QUFDeEMsU0FBU0Msa0JBQWtCLFFBQVEsa0NBQWtDO0FBQ3JFLFlBQVlDLFNBQVMsV0FBVztBQUVoQyxnQkFBc0JDO1dBQUFBOztTQUFBQTtJQUFBQSxpQkFBZixvQkFBQTtZQUNDQyxRQUNBQyxRQUNBQyxZQUlBQzs7OztvQkFOQUgsU0FBU0w7b0JBQ0E7O3dCQUFNQzs7O29CQUFmSyxTQUFTO29CQUNUQyxhQUFhRSxRQUFRQyxHQUFHLENBQUNDLHNCQUFzQixJQUFJTCxPQUFPTSxVQUFVLENBQUNMLFVBQVU7b0JBRXJGRixPQUFPUSxJQUFJLENBQUM7b0JBRU5MLGFBQWFOLG1CQUFtQkk7b0JBRXRDUCxRQUFRUyxZQUFZLFVBQVU7d0JBQzVCTSxlQUFlO3dCQUNmQyxPQUFPOzRCQUNMQyxhQUFhO3dCQUNmO29CQUNGLEdBQUdDLElBQUksQ0FBQyxTQUFDQzt3QkFDUHBCLEdBQUdxQixhQUFhLENBQUNaLFlBQVlXO3dCQUM3QmIsT0FBT1EsSUFBSSxDQUFDLEFBQUMsb0JBQThCLE9BQVhOO29CQUNsQzs7Ozs7O0lBQ0Y7V0FsQnNCSDs7QUFvQnRCLDZDQUE2QztBQUM3Qyw4RkFBOEY7QUFDOUYsSUFBSSxZQUFZRCxHQUFHLENBQUNpQixVQUFVLENBQUMsVUFBVTtJQUN2QyxJQUFNQyxhQUFhbEIsSUFBSW1CLGFBQWEsQ0FBQyxZQUFZbkIsR0FBRztJQUNwRCxJQUFJTSxRQUFRYyxJQUFJLENBQUMsRUFBRSxLQUFLRixZQUFZO1FBQ2xDakI7SUFDRjtBQUNGIn0=